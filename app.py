import streamlit as st
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from io import BytesIO

# Simulador de adapta√ß√£o
def adaptar_questao(questao, tipos):
    enunciado, alternativas, resposta, tem_imagem = questao

    # TDAH e Ansiedade: segmenta o enunciado e simplifica alternativas longas
    if "TDAH" in tipos or "Ansiedade" in tipos:
        enunciado = "\n".join(enunciado.split(". "))
        alternativas = [alt[:100] + "..." if len(alt) > 100 else alt for alt in alternativas]

    # Dislexia: letras min√∫sculas e capitaliza√ß√£o
    if "Dislexia" in tipos:
        enunciado = enunciado.lower().capitalize()

    return (enunciado, alternativas, resposta, tem_imagem)

# Gera√ß√£o de DOCX com dicas e quest√µes
def gerar_docx_com_dicas(questoes, tipos, dicas_por_tipo):
    doc = Document()
    titulo = doc.add_heading("üß† Prova Adaptada - AdaptaProva", level=1)
    titulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    if tipos:
        doc.add_heading("üß≠ Orienta√ß√µes iniciais", level=2)
        par = doc.add_paragraph()
        par.add_run("Voc√™ selecionou: ").bold = True
        par.add_run(", ".join(tipos)).italic = True
        par.add_run(". Aqui est√£o algumas dicas para voc√™:")

        dicas_combinadas = []
        for t in tipos:
            dicas_combinadas.extend(dicas_por_tipo.get(t, []))
        dicas_combinadas = list(dict.fromkeys(dicas_combinadas))  # remove duplicatas

        for dica in dicas_combinadas:
            doc.add_paragraph("‚Ä¢ " + dica, style="List Bullet")

    doc.add_paragraph("\n")

    for i, (enunciado, alternativas, _, tem_imagem) in enumerate(questoes):
        doc.add_heading(f"Quest√£o {i+1}", level=3)
        if tem_imagem:
            doc.add_paragraph("üö© Esta quest√£o cont√©m uma imagem na vers√£o original.")
        doc.add_paragraph(enunciado)
        for alt in alternativas:
            doc.add_paragraph(f"- {alt}", style="List Bullet")

    output = BytesIO()
    doc.save(output)
    output.seek(0)
    return output

# Dicas por neurodiverg√™ncia
dicas_por_tipo = {
    "TDAH": [
        "Use r√©gua ou dedo para focar na linha.",
        "Leia uma quest√£o por vez.",
        "Ignore distra√ß√µes externas momentaneamente.",
        "Respire fundo se perder o foco."
    ],
    "Ansiedade": [
        "Fa√ßa pausas curtas para respirar.",
        "Lembre-se de que voc√™ pode voltar a quest√µes dif√≠ceis.",
        "Evite se pressionar pelo tempo.",
        "Pense positivo: voc√™ pode fazer isso."
    ],
    "Dislexia": [
        "Leia em voz baixa se poss√≠vel.",
        "Substitua palavras dif√≠ceis por sin√¥nimos.",
        "Divida frases grandes em partes menores.",
        "Use marca-texto se tiver em m√£os."
    ]
}

# Interface Streamlit
st.title("üß† AdaptaProva - Gerador de Provas Acess√≠veis")

tipos = st.multiselect("Selecione as neurodiverg√™ncias do aluno:", ["TDAH", "Ansiedade", "Dislexia"])

# Quest√µes exemplo
questoes_originais = [
    ("Qual √© a capital do Brasil? A cidade √© conhecida por sua arquitetura moderna.",
     ["S√£o Paulo", "Bras√≠lia", "Rio de Janeiro", "Belo Horizonte"], "Bras√≠lia", False),

    ("Observe a imagem e responda: Qual animal est√° representado?",
     ["Gato", "Cachorro", "Le√£o", "Cavalo"], "Le√£o", True)
]

if st.button("üìÑ Gerar Prova Adaptada"):
    questoes = [adaptar_questao(q, tipos) for q in questoes_originais]

    # Pr√©-visualiza√ß√£o na tela
    for i, (enunciado, alternativas, _, tem_imagem) in enumerate(questoes):
        st.markdown(f"### Quest√£o {i+1}")
        if tem_imagem:
            st.info("üö© Esta quest√£o cont√©m uma imagem na vers√£o original.")
        st.write(enunciado)
        for alt in alternativas:
            st.write(f"- {alt}")

    # Gera√ß√£o do DOCX com dicas
    docx_file = gerar_docx_com_dicas(questoes, tipos, dicas_por_tipo)
    st.download_button(
        label="üì• Baixar Prova Adaptada (.docx)",
        data=docx_file,
        file_name="prova_adaptada.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )
